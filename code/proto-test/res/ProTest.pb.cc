// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProTest.proto

#include "ProTest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace ProTest {
class taskReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<taskReport>
      _instance;
} _taskReport_default_instance_;
}  // namespace ProTest
namespace protobuf_ProTest_2eproto {
static void InitDefaultstaskReport() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProTest::_taskReport_default_instance_;
    new (ptr) ::ProTest::taskReport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProTest::taskReport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_taskReport =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultstaskReport}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_taskReport.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProTest::taskReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProTest::taskReport, taskname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProTest::taskReport, tasktype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProTest::taskReport, taskdesc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProTest::taskReport, queuenum_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ProTest::taskReport)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ProTest::_taskReport_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ProTest.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rProTest.proto\022\007ProTest\"\264\001\n\ntaskReport\022"
      "\020\n\010taskName\030\001 \001(\014\022*\n\010taskType\030\002 \001(\0162\030.Pr"
      "oTest.taskReport.Type\022\020\n\010taskDesc\030\003 \001(\014\022"
      "\020\n\010queueNum\030\004 \001(\005\"D\n\004Type\022\n\n\006CREATE\020\000\022\t\n"
      "\005START\020\001\022\014\n\010PROGRESS\020\002\022\014\n\010COMPLETE\020\003\022\t\n\005"
      "FAILD\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 215);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProTest.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ProTest_2eproto
namespace ProTest {
const ::google::protobuf::EnumDescriptor* taskReport_Type_descriptor() {
  protobuf_ProTest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProTest_2eproto::file_level_enum_descriptors[0];
}
bool taskReport_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const taskReport_Type taskReport::CREATE;
const taskReport_Type taskReport::START;
const taskReport_Type taskReport::PROGRESS;
const taskReport_Type taskReport::COMPLETE;
const taskReport_Type taskReport::FAILD;
const taskReport_Type taskReport::Type_MIN;
const taskReport_Type taskReport::Type_MAX;
const int taskReport::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void taskReport::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int taskReport::kTaskNameFieldNumber;
const int taskReport::kTaskTypeFieldNumber;
const int taskReport::kTaskDescFieldNumber;
const int taskReport::kQueueNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

taskReport::taskReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ProTest_2eproto::scc_info_taskReport.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProTest.taskReport)
}
taskReport::taskReport(const taskReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.taskname().size() > 0) {
    taskname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskname_);
  }
  taskdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.taskdesc().size() > 0) {
    taskdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskdesc_);
  }
  ::memcpy(&tasktype_, &from.tasktype_,
    static_cast<size_t>(reinterpret_cast<char*>(&queuenum_) -
    reinterpret_cast<char*>(&tasktype_)) + sizeof(queuenum_));
  // @@protoc_insertion_point(copy_constructor:ProTest.taskReport)
}

void taskReport::SharedCtor() {
  taskname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  taskdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tasktype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queuenum_) -
      reinterpret_cast<char*>(&tasktype_)) + sizeof(queuenum_));
}

taskReport::~taskReport() {
  // @@protoc_insertion_point(destructor:ProTest.taskReport)
  SharedDtor();
}

void taskReport::SharedDtor() {
  taskname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  taskdesc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void taskReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* taskReport::descriptor() {
  ::protobuf_ProTest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProTest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const taskReport& taskReport::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ProTest_2eproto::scc_info_taskReport.base);
  return *internal_default_instance();
}


void taskReport::Clear() {
// @@protoc_insertion_point(message_clear_start:ProTest.taskReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  taskdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tasktype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queuenum_) -
      reinterpret_cast<char*>(&tasktype_)) + sizeof(queuenum_));
  _internal_metadata_.Clear();
}

bool taskReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProTest.taskReport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes taskName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_taskname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ProTest.taskReport.Type taskType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tasktype(static_cast< ::ProTest::taskReport_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes taskDesc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_taskdesc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 queueNum = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queuenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProTest.taskReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProTest.taskReport)
  return false;
#undef DO_
}

void taskReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProTest.taskReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes taskName = 1;
  if (this->taskname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->taskname(), output);
  }

  // .ProTest.taskReport.Type taskType = 2;
  if (this->tasktype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tasktype(), output);
  }

  // bytes taskDesc = 3;
  if (this->taskdesc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->taskdesc(), output);
  }

  // int32 queueNum = 4;
  if (this->queuenum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->queuenum(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ProTest.taskReport)
}

::google::protobuf::uint8* taskReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ProTest.taskReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes taskName = 1;
  if (this->taskname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->taskname(), target);
  }

  // .ProTest.taskReport.Type taskType = 2;
  if (this->tasktype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tasktype(), target);
  }

  // bytes taskDesc = 3;
  if (this->taskdesc().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->taskdesc(), target);
  }

  // int32 queueNum = 4;
  if (this->queuenum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->queuenum(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProTest.taskReport)
  return target;
}

size_t taskReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProTest.taskReport)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes taskName = 1;
  if (this->taskname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->taskname());
  }

  // bytes taskDesc = 3;
  if (this->taskdesc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->taskdesc());
  }

  // .ProTest.taskReport.Type taskType = 2;
  if (this->tasktype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tasktype());
  }

  // int32 queueNum = 4;
  if (this->queuenum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->queuenum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void taskReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProTest.taskReport)
  GOOGLE_DCHECK_NE(&from, this);
  const taskReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const taskReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProTest.taskReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProTest.taskReport)
    MergeFrom(*source);
  }
}

void taskReport::MergeFrom(const taskReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProTest.taskReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskname().size() > 0) {

    taskname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskname_);
  }
  if (from.taskdesc().size() > 0) {

    taskdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskdesc_);
  }
  if (from.tasktype() != 0) {
    set_tasktype(from.tasktype());
  }
  if (from.queuenum() != 0) {
    set_queuenum(from.queuenum());
  }
}

void taskReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProTest.taskReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taskReport::CopyFrom(const taskReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProTest.taskReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taskReport::IsInitialized() const {
  return true;
}

void taskReport::Swap(taskReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void taskReport::InternalSwap(taskReport* other) {
  using std::swap;
  taskname_.Swap(&other->taskname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  taskdesc_.Swap(&other->taskdesc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tasktype_, other->tasktype_);
  swap(queuenum_, other->queuenum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata taskReport::GetMetadata() const {
  protobuf_ProTest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProTest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ProTest
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ProTest::taskReport* Arena::CreateMaybeMessage< ::ProTest::taskReport >(Arena* arena) {
  return Arena::CreateInternal< ::ProTest::taskReport >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
