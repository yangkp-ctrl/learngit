// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProTest.proto

#ifndef PROTOBUF_INCLUDED_ProTest_2eproto
#define PROTOBUF_INCLUDED_ProTest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ProTest_2eproto 

namespace protobuf_ProTest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ProTest_2eproto
namespace ProTest {
class taskReport;
class taskReportDefaultTypeInternal;
extern taskReportDefaultTypeInternal _taskReport_default_instance_;
}  // namespace ProTest
namespace google {
namespace protobuf {
template<> ::ProTest::taskReport* Arena::CreateMaybeMessage<::ProTest::taskReport>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ProTest {

enum taskReport_Type {
  taskReport_Type_CREATE = 0,
  taskReport_Type_START = 1,
  taskReport_Type_PROGRESS = 2,
  taskReport_Type_COMPLETE = 3,
  taskReport_Type_FAILD = 4,
  taskReport_Type_taskReport_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  taskReport_Type_taskReport_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool taskReport_Type_IsValid(int value);
const taskReport_Type taskReport_Type_Type_MIN = taskReport_Type_CREATE;
const taskReport_Type taskReport_Type_Type_MAX = taskReport_Type_FAILD;
const int taskReport_Type_Type_ARRAYSIZE = taskReport_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* taskReport_Type_descriptor();
inline const ::std::string& taskReport_Type_Name(taskReport_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    taskReport_Type_descriptor(), value);
}
inline bool taskReport_Type_Parse(
    const ::std::string& name, taskReport_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<taskReport_Type>(
    taskReport_Type_descriptor(), name, value);
}
// ===================================================================

class taskReport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProTest.taskReport) */ {
 public:
  taskReport();
  virtual ~taskReport();

  taskReport(const taskReport& from);

  inline taskReport& operator=(const taskReport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  taskReport(taskReport&& from) noexcept
    : taskReport() {
    *this = ::std::move(from);
  }

  inline taskReport& operator=(taskReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const taskReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const taskReport* internal_default_instance() {
    return reinterpret_cast<const taskReport*>(
               &_taskReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(taskReport* other);
  friend void swap(taskReport& a, taskReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline taskReport* New() const final {
    return CreateMaybeMessage<taskReport>(NULL);
  }

  taskReport* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<taskReport>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const taskReport& from);
  void MergeFrom(const taskReport& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(taskReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef taskReport_Type Type;
  static const Type CREATE =
    taskReport_Type_CREATE;
  static const Type START =
    taskReport_Type_START;
  static const Type PROGRESS =
    taskReport_Type_PROGRESS;
  static const Type COMPLETE =
    taskReport_Type_COMPLETE;
  static const Type FAILD =
    taskReport_Type_FAILD;
  static inline bool Type_IsValid(int value) {
    return taskReport_Type_IsValid(value);
  }
  static const Type Type_MIN =
    taskReport_Type_Type_MIN;
  static const Type Type_MAX =
    taskReport_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    taskReport_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return taskReport_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return taskReport_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return taskReport_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes taskName = 1;
  void clear_taskname();
  static const int kTaskNameFieldNumber = 1;
  const ::std::string& taskname() const;
  void set_taskname(const ::std::string& value);
  #if LANG_CXX11
  void set_taskname(::std::string&& value);
  #endif
  void set_taskname(const char* value);
  void set_taskname(const void* value, size_t size);
  ::std::string* mutable_taskname();
  ::std::string* release_taskname();
  void set_allocated_taskname(::std::string* taskname);

  // bytes taskDesc = 3;
  void clear_taskdesc();
  static const int kTaskDescFieldNumber = 3;
  const ::std::string& taskdesc() const;
  void set_taskdesc(const ::std::string& value);
  #if LANG_CXX11
  void set_taskdesc(::std::string&& value);
  #endif
  void set_taskdesc(const char* value);
  void set_taskdesc(const void* value, size_t size);
  ::std::string* mutable_taskdesc();
  ::std::string* release_taskdesc();
  void set_allocated_taskdesc(::std::string* taskdesc);

  // .ProTest.taskReport.Type taskType = 2;
  void clear_tasktype();
  static const int kTaskTypeFieldNumber = 2;
  ::ProTest::taskReport_Type tasktype() const;
  void set_tasktype(::ProTest::taskReport_Type value);

  // int32 queueNum = 4;
  void clear_queuenum();
  static const int kQueueNumFieldNumber = 4;
  ::google::protobuf::int32 queuenum() const;
  void set_queuenum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProTest.taskReport)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr taskname_;
  ::google::protobuf::internal::ArenaStringPtr taskdesc_;
  int tasktype_;
  ::google::protobuf::int32 queuenum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ProTest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// taskReport

// bytes taskName = 1;
inline void taskReport::clear_taskname() {
  taskname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& taskReport::taskname() const {
  // @@protoc_insertion_point(field_get:ProTest.taskReport.taskName)
  return taskname_.GetNoArena();
}
inline void taskReport::set_taskname(const ::std::string& value) {
  
  taskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProTest.taskReport.taskName)
}
#if LANG_CXX11
inline void taskReport::set_taskname(::std::string&& value) {
  
  taskname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProTest.taskReport.taskName)
}
#endif
inline void taskReport::set_taskname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  taskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProTest.taskReport.taskName)
}
inline void taskReport::set_taskname(const void* value, size_t size) {
  
  taskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProTest.taskReport.taskName)
}
inline ::std::string* taskReport::mutable_taskname() {
  
  // @@protoc_insertion_point(field_mutable:ProTest.taskReport.taskName)
  return taskname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* taskReport::release_taskname() {
  // @@protoc_insertion_point(field_release:ProTest.taskReport.taskName)
  
  return taskname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void taskReport::set_allocated_taskname(::std::string* taskname) {
  if (taskname != NULL) {
    
  } else {
    
  }
  taskname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taskname);
  // @@protoc_insertion_point(field_set_allocated:ProTest.taskReport.taskName)
}

// .ProTest.taskReport.Type taskType = 2;
inline void taskReport::clear_tasktype() {
  tasktype_ = 0;
}
inline ::ProTest::taskReport_Type taskReport::tasktype() const {
  // @@protoc_insertion_point(field_get:ProTest.taskReport.taskType)
  return static_cast< ::ProTest::taskReport_Type >(tasktype_);
}
inline void taskReport::set_tasktype(::ProTest::taskReport_Type value) {
  
  tasktype_ = value;
  // @@protoc_insertion_point(field_set:ProTest.taskReport.taskType)
}

// bytes taskDesc = 3;
inline void taskReport::clear_taskdesc() {
  taskdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& taskReport::taskdesc() const {
  // @@protoc_insertion_point(field_get:ProTest.taskReport.taskDesc)
  return taskdesc_.GetNoArena();
}
inline void taskReport::set_taskdesc(const ::std::string& value) {
  
  taskdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProTest.taskReport.taskDesc)
}
#if LANG_CXX11
inline void taskReport::set_taskdesc(::std::string&& value) {
  
  taskdesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProTest.taskReport.taskDesc)
}
#endif
inline void taskReport::set_taskdesc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  taskdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProTest.taskReport.taskDesc)
}
inline void taskReport::set_taskdesc(const void* value, size_t size) {
  
  taskdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProTest.taskReport.taskDesc)
}
inline ::std::string* taskReport::mutable_taskdesc() {
  
  // @@protoc_insertion_point(field_mutable:ProTest.taskReport.taskDesc)
  return taskdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* taskReport::release_taskdesc() {
  // @@protoc_insertion_point(field_release:ProTest.taskReport.taskDesc)
  
  return taskdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void taskReport::set_allocated_taskdesc(::std::string* taskdesc) {
  if (taskdesc != NULL) {
    
  } else {
    
  }
  taskdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taskdesc);
  // @@protoc_insertion_point(field_set_allocated:ProTest.taskReport.taskDesc)
}

// int32 queueNum = 4;
inline void taskReport::clear_queuenum() {
  queuenum_ = 0;
}
inline ::google::protobuf::int32 taskReport::queuenum() const {
  // @@protoc_insertion_point(field_get:ProTest.taskReport.queueNum)
  return queuenum_;
}
inline void taskReport::set_queuenum(::google::protobuf::int32 value) {
  
  queuenum_ = value;
  // @@protoc_insertion_point(field_set:ProTest.taskReport.queueNum)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProTest

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ProTest::taskReport_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProTest::taskReport_Type>() {
  return ::ProTest::taskReport_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ProTest_2eproto
